const hourlyForecast = document.getElementById("hourlyForecast");
const tenDayForecast = document.getElementById("tenDayForecast");
const aqiDisplay = document.getElementById("aqiDisplay");


// Example Data (Replace with API)
const hours = ["6AM", "9AM", "12PM", "3PM", "6PM", "9PM"];
const temps = [26, 27, 29, 30, 28, 27];


function loadHourly() {
hourlyForecast.innerHTML = "";
hours.forEach((hour, i) => {
const card = document.createElement("div");
card.className = "hour-card";
card.innerHTML = `<p>${hour}</p><i class="fas fa-cloud"></i><p>${temps[i]}°</p>`;
hourlyForecast.appendChild(card);
});
}


function updateAQI(aqi) {
let color = "green";
if (aqi > 100) color = "orange";
if (aqi > 200) color = "red";
aqiDisplay.style.color = color;
aqiDisplay.textContent = `AQI: ${aqi}`;
}


loadHourly();
updateAQI(42);

// Theme Toggle Functionality
const themeToggle = document.getElementById('themeToggle');

themeToggle.addEventListener('click', () => {
  document.body.classList.toggle('light-theme');
  const isLight = document.body.classList.contains('light-theme');
  themeToggle.innerHTML = isLight ? '<i class="fas fa-sun"></i>' : '<i class="fas fa-moon"></i>';
});

// Fetch weather data based on user's device location on page load
window.addEventListener('load', () => {
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(
      (position) => {
        const lat = position.coords.latitude;
        const lon = position.coords.longitude;
        console.log(`User location: Latitude ${lat}, Longitude ${lon}`);
        // TODO: Fetch weather data using lat, lon from API and update UI
        alert(`Fetching weather data for your location: (${lat.toFixed(2)}, ${lon.toFixed(2)})`);
      },
      (error) => {
        console.error('Error getting location:', error);
        alert('Unable to retrieve your location. Showing default weather data.');
      }
    );
  } else {
    alert('Geolocation is not supported by your browser. Showing default weather data.');
  }
});
=======
/* ================= JS (script.js) ================= */
const hourlyForecast = document.getElementById("hourlyForecast");
const tenDayForecast = document.getElementById("tenDayForecast");
const aqiDisplay = document.getElementById("aqiDisplay");
const cityName = document.getElementById("cityName");
const mainCondition = document.querySelector(".main-condition");
const humidityDisplay = document.getElementById("humidity");
const feelsLikeDisplay = document.getElementById("feelsLike");
const visibilityDisplay = document.getElementById("visibility");
const pressureDisplay = document.getElementById("pressure");
const searchBar = document.getElementById("searchBar");

const API_KEY = "f8231a57ccc412b7e05a7f73c6e5d54a";

let tempChart, aqiChart;

// Clear existing forecast UI
function clearForecasts() {
  hourlyForecast.innerHTML = "";
  tenDayForecast.innerHTML = "";
}

// Update hourly forecast UI
function loadHourly(hours, temps, icons) {
  hourlyForecast.innerHTML = "";
  hours.forEach((hour, i) => {
    const card = document.createElement("div");
    card.className = "hour-card";
    card.innerHTML = `<p>${hour}</p><i class="fas fa-${icons[i]}"></i><p>${temps[i]}°</p>`;
    hourlyForecast.appendChild(card);
  });
}

// Update AQI display
function updateAQI(aqi) {
  let color = "green";
  if (aqi > 100) color = "orange";
  if (aqi > 200) color = "red";
  aqiDisplay.style.color = color;
  aqiDisplay.textContent = `AQI: ${aqi}`;
}

// Update 10-day forecast UI
function loadTenDayForecast(daily) {
  tenDayForecast.innerHTML = "";
  daily.forEach(day => {
    const li = document.createElement("li");
    const date = new Date(day.dt * 1000);
    const options = { weekday: "short", month: "short", day: "numeric" };
    const dateStr = date.toLocaleDateString(undefined, options);
    li.innerHTML = `${dateStr}: ${Math.round(day.temp.day)}° | ${day.weather[0].main}`;
    tenDayForecast.appendChild(li);
  });
}

// Update main weather info UI
function updateMainInfo(data) {
  cityName.textContent = data.name;
  mainCondition.textContent = `${Math.round(data.main.temp)}° | ${data.weather[0].main}`;
  humidityDisplay.textContent = `${data.main.humidity}%`;
  feelsLikeDisplay.textContent = `${Math.round(data.main.feels_like)}°`;
  visibilityDisplay.textContent = `${(data.visibility / 1000).toFixed(1)} km`;
  pressureDisplay.textContent = `${data.main.pressure} hPa`;
}

// Fetch weather data from OpenWeather API
async function fetchWeatherData(lat, lon) {
  try {
    // Fetch current weather and daily forecast (One Call API)
    const oneCallUrl = `https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&exclude=minutely,alerts&units=metric&appid=${API_KEY}`;
    const oneCallResponse = await fetch(oneCallUrl);
    const oneCallData = await oneCallResponse.json();

    // Fetch city name and current weather (Current Weather API)
    const currentWeatherUrl = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&appid=${API_KEY}`;
    const currentWeatherResponse = await fetch(currentWeatherUrl);
    const currentWeatherData = await currentWeatherResponse.json();

    // Fetch air quality data (Air Pollution API)
    const airQualityUrl = `https://api.openweathermap.org/data/2.5/air_pollution?lat=${lat}&lon=${lon}&appid=${API_KEY}`;
    const airQualityResponse = await fetch(airQualityUrl);
    const airQualityData = await airQualityResponse.json();

    // Update main info
    updateMainInfo(currentWeatherData);

    // Update hourly forecast (next 6 hours)
    const hours = [];
    const temps = [];
    const icons = [];
    for (let i = 0; i < 6; i++) {
      const dt = new Date(oneCallData.hourly[i].dt * 1000);
      hours.push(dt.getHours() % 12 || 12 + (dt.getHours() >= 12 ? "PM" : "AM"));
      temps.push(Math.round(oneCallData.hourly[i].temp));
      icons.push(mapWeatherIcon(oneCallData.hourly[i].weather[0].icon));
    }
    loadHourly(hours, temps, icons);

    // Update 10-day forecast (daily, next 10 days)
    loadTenDayForecast(oneCallData.daily.slice(0, 10));

    // Update AQI
    const aqi = airQualityData.list[0].main.aqi;
    updateAQI(mapAQI(aqi));

    // TODO: Update charts (tempChart, aqiChart) if implemented

  } catch (error) {
    console.error("Error fetching weather data:", error);
    alert("Failed to fetch weather data. Please try again later.");
  }
}

// Map OpenWeather icon code to FontAwesome icon names (simplified)
function mapWeatherIcon(iconCode) {
  if (iconCode.startsWith("01")) return "sun"; // clear sky
  if (iconCode.startsWith("02")) return "cloud-sun"; // few clouds
  if (iconCode.startsWith("03") || iconCode.startsWith("04")) return "cloud"; // clouds
  if (iconCode.startsWith("09") || iconCode.startsWith("10")) return "cloud-showers-heavy"; // rain
  if (iconCode.startsWith("11")) return "bolt"; // thunderstorm
  if (iconCode.startsWith("13")) return "snowflake"; // snow
  if (iconCode.startsWith("50")) return "smog"; // mist
  return "cloud";
}

// Map OpenWeather AQI scale (1-5) to numeric AQI value for color coding
function mapAQI(aqi) {
  switch (aqi) {
    case 1: return 50; // Good
    case 2: return 100; // Fair
    case 3: return 150; // Moderate
    case 4: return 200; // Poor
    case 5: return 300; // Very Poor
    default: return 0;
  }
}

// Search bar event listener to fetch weather for searched location
searchBar.addEventListener("keypress", async (e) => {
  if (e.key === "Enter") {
    const query = searchBar.value.trim();
    if (!query) return;
    try {
      // Use OpenWeather Geocoding API to get lat/lon for city name
      const geoUrl = `https://api.openweathermap.org/geo/1.0/direct?q=${encodeURIComponent(query)}&limit=1&appid=${API_KEY}`;
      const geoResponse = await fetch(geoUrl);
      const geoData = await geoResponse.json();
      if (geoData.length === 0) {
        alert("Location not found.");
        return;
      }
      const { lat, lon } = geoData[0];
      fetchWeatherData(lat, lon);
    } catch (error) {
      console.error("Error fetching location data:", error);
      alert("Failed to fetch location data. Please try again later.");
    }
  }
});

// Theme Toggle Functionality
const themeToggle = document.getElementById('themeToggle');

themeToggle.addEventListener('click', () => {
  document.body.classList.toggle('light-theme');
  const isLight = document.body.classList.contains('light-theme');
  themeToggle.innerHTML = isLight ? '<i class="fas fa-sun"></i>' : '<i class="fas fa-moon"></i>';
});

// Fetch weather data based on user's device location on page load
window.addEventListener('load', () => {
  if (navigator.geolocation) {
    navigator.geolocation.getCurrentPosition(
      (position) => {
        const lat = position.coords.latitude;
        const lon = position.coords.longitude;
        console.log(`User location: Latitude ${lat}, Longitude ${lon}`);
        fetchWeatherData(lat, lon);
      },
      (error) => {
        console.error('Error getting location:', error);
        alert('Unable to retrieve your location. Showing default weather data.');
        // Default to Kolkata coordinates
        fetchWeatherData(22.5726, 88.3639);
      }
    );
  } else {
    alert('Geolocation is not supported by your browser. Showing default weather data.');
    // Default to Kolkata coordinates
    fetchWeatherData(22.5726, 88.3639);
  }
});
